openapi: 3.0.3
info:
  title: User Account API
  version: 1.0.0
  description: >
    API for managing user accounts with standard CRUD operations and JWT authentication.
    Endpoints (exce pt for token generation) require a valid JWT provided via the Bearer scheme.
servers:
  - url: http://localhost:8000
paths:
  /token:
    post:
      summary: Generate a JWT token for a user
      operationId: generateToken
      requestBody:
        description: User login credentials.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username (or email) for authentication.
                password:
                  type: string
                  description: The user's password.
              required:
                - username
                - password
      responses:
        '200':
          description: JWT token generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    example: bearer
      # This endpoint is public and does not require authentication.
      security: [ ]

  /users:
    get:
      summary: Retrieve a list of user accounts
      operationId: listUsers
      responses:
        '200':
          description: A list of user accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ]
    post:
      summary: Create a new user account
      operationId: createUser
      requestBody:
        description: User account to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: [ ]

  /users/{userId}:
    get:
      summary: Retrieve a user account by ID
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: Numeric ID of the user to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A user account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - bearerAuth: [ ]
    put:
      summary: Update an existing user account
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: Numeric ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated user account data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - bearerAuth: [ ]
    delete:
      summary: Delete a user account
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: Numeric ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User account deleted successfully
        '404':
          description: User not found
      security:
        - bearerAuth: [ ]
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
          readOnly: true
        email:
          type: string
          format: email
          description: The user's email address
        name:
          type: string
          description: The user's name
        date_of_birth:
          type: string
          format: date
          description: The user's date of birth
        postcode:
          type: string
          description: The user's postcode
      required:
        - id
        - email
        - name
        - date_of_birth
        - postcode

    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The user's email address
        name:
          type: string
          description: The user's name
        date_of_birth:
          type: string
          format: date
          description: The user's date of birth
        postcode:
          type: string
          description: The user's postcode
      required:
        - email
        - name
        - date_of_birth
        - postcode

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The user's email address
        name:
          type: string
          description: The user's name
        date_of_birth:
          type: string
          format: date
          description: The user's date of birth
        postcode:
          type: string
          description: The user's postcode
      required:
        - email
        - name
        - date_of_birth
        - postcode
